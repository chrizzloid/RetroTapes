// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RetroTapes.Data;

#nullable disable

namespace RetroTapes.Migrations
{
    [DbContext(typeof(SakilaContext))]
    partial class SakilaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RetroTapes.Models.Actor", b =>
                {
                    b.Property<int>("ActorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("actor_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActorId"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("last_name");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("last_update")
                        .HasDefaultValueSql("(getutcdate())");

                    b.HasKey("ActorId")
                        .HasName("PK__actor__8B2447B422F2400E");

                    b.HasIndex(new[] { "LastName" }, "idx_actor_last_name");

                    b.ToTable("actor", (string)null);
                });

            modelBuilder.Entity("RetroTapes.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("address_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("address");

                    b.Property<string>("Address2")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("address2")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("city_id");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("district");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("last_update")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone");

                    b.Property<string>("PostalCode")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("postal_code")
                        .HasDefaultValueSql("(NULL)");

                    b.HasKey("AddressId")
                        .HasName("PK__address__CAA247C8F43D9C09");

                    b.HasIndex(new[] { "CityId" }, "idx_fk_city_id");

                    b.ToTable("address", (string)null);
                });

            modelBuilder.Entity("RetroTapes.Models.Category", b =>
                {
                    b.Property<byte>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("category_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("CategoryId"));

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("last_update")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("name");

                    b.HasKey("CategoryId")
                        .HasName("PK__category__D54EE9B40E25CE9D");

                    b.ToTable("category", (string)null);
                });

            modelBuilder.Entity("RetroTapes.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("city_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"));

                    b.Property<string>("City1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("city");

                    b.Property<short>("CountryId")
                        .HasColumnType("smallint")
                        .HasColumnName("country_id");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("last_update")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("CityId")
                        .HasName("PK__city__031491A8401EF8D4");

                    b.HasIndex(new[] { "CountryId" }, "idx_fk_country_id");

                    b.ToTable("city", (string)null);
                });

            modelBuilder.Entity("RetroTapes.Models.Country", b =>
                {
                    b.Property<short>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("country_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("CountryId"));

                    b.Property<string>("Country1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("country");

                    b.Property<DateTime?>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("last_update")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("CountryId")
                        .HasName("PK__country__7E8CD055DF24035C");

                    b.ToTable("country", (string)null);
                });

            modelBuilder.Entity("RetroTapes.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Active")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasDefaultValue("Y")
                        .HasColumnName("active")
                        .IsFixedLength();

                    b.Property<int>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("address_id");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("last_name");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("last_update")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnName("store_id");

                    b.HasKey("CustomerId")
                        .HasName("PK__customer__CD65CB85583B59C0");

                    b.HasIndex(new[] { "AddressId" }, "idx_fk_address_id");

                    b.HasIndex(new[] { "StoreId" }, "idx_fk_store_id");

                    b.HasIndex(new[] { "LastName" }, "idx_last_name");

                    b.ToTable("customer", (string)null);
                });

            modelBuilder.Entity("RetroTapes.Models.CustomerList", b =>
                {
                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("country");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(91)
                        .IsUnicode(false)
                        .HasColumnType("varchar(91)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("notes");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone");

                    b.Property<int>("Sid")
                        .HasColumnType("int")
                        .HasColumnName("SID");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("zip_code");

                    b.ToTable((string)null);

                    b.ToView("customer_list", (string)null);
                });

            modelBuilder.Entity("RetroTapes.Models.Film", b =>
                {
                    b.Property<int>("FilmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("film_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FilmId"));

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("description")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<byte>("LanguageId")
                        .HasColumnType("tinyint")
                        .HasColumnName("language_id");

                    b.Property<DateTime>("LastUpdate")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("last_update");

                    b.Property<short?>("Length")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("length")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<byte?>("OriginalLanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("original_language_id")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasDefaultValue("G")
                        .HasColumnName("rating");

                    b.Property<string>("ReleaseYear")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("release_year");

                    b.Property<byte>("RentalDuration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)3)
                        .HasColumnName("rental_duration");

                    b.Property<decimal>("RentalRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(4, 2)")
                        .HasColumnName("rental_rate")
                        .HasDefaultValueSql("((4.99))");

                    b.Property<decimal>("ReplacementCost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("replacement_cost")
                        .HasDefaultValueSql("((19.99))");

                    b.Property<string>("SpecialFeatures")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("special_features")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.HasKey("FilmId")
                        .HasName("PK__film__349764A9B8CD0D16");

                    b.HasIndex(new[] { "LanguageId" }, "idx_fk_language_id");

                    b.HasIndex(new[] { "OriginalLanguageId" }, "idx_fk_original_language_id");

                    b.ToTable("film", (string)null);
                });

            modelBuilder.Entity("RetroTapes.Models.FilmActor", b =>
                {
                    b.Property<int>("ActorId")
                        .HasColumnType("int")
                        .HasColumnName("actor_id");

                    b.Property<int>("FilmId")
                        .HasColumnType("int")
                        .HasColumnName("film_id");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("last_update")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ActorId", "FilmId")
                        .HasName("PK__film_act__086D31FECA82AC99");

                    b.HasIndex(new[] { "ActorId" }, "idx_fk_film_actor_actor");

                    b.HasIndex(new[] { "FilmId" }, "idx_fk_film_actor_film");

                    b.ToTable("film_actor", (string)null);
                });

            modelBuilder.Entity("RetroTapes.Models.FilmCategory", b =>
                {
                    b.Property<int>("FilmId")
                        .HasColumnType("int")
                        .HasColumnName("film_id");

                    b.Property<byte>("CategoryId")
                        .HasColumnType("tinyint")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("last_update")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("FilmId", "CategoryId")
                        .HasName("PK__film_cat__69C38A328EB0F374");

                    b.HasIndex(new[] { "CategoryId" }, "idx_fk_film_category_category");

                    b.HasIndex(new[] { "FilmId" }, "idx_fk_film_category_film");

                    b.ToTable("film_category", (string)null);
                });

            modelBuilder.Entity("RetroTapes.Models.FilmList", b =>
                {
                    b.Property<string>("Actors")
                        .IsRequired()
                        .HasMaxLength(91)
                        .IsUnicode(false)
                        .HasColumnType("varchar(91)")
                        .HasColumnName("actors");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("category");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("Fid")
                        .HasColumnType("int")
                        .HasColumnName("FID");

                    b.Property<short?>("Length")
                        .HasColumnType("smallint")
                        .HasColumnName("length");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(4, 2)")
                        .HasColumnName("price");

                    b.Property<string>("Rating")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("rating");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.ToTable((string)null);

                    b.ToView("film_list", (string)null);
                });

            modelBuilder.Entity("RetroTapes.Models.FilmText", b =>
                {
                    b.Property<short>("FilmId")
                        .HasColumnType("smallint")
                        .HasColumnName("film_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.HasKey("FilmId")
                        .HasName("PK__film_tex__349764A9D7D4BF07");

                    b.ToTable("film_text", (string)null);
                });

            modelBuilder.Entity("RetroTapes.Models.Inventory", b =>
                {
                    b.Property<int>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("inventory_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InventoryId"));

                    b.Property<int>("FilmId")
                        .HasColumnType("int")
                        .HasColumnName("film_id");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("last_update")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnName("store_id");

                    b.HasKey("InventoryId")
                        .HasName("PK__inventor__B59ACC49A232CFB8");

                    b.HasIndex(new[] { "FilmId" }, "idx_fk_film_id");

                    b.HasIndex(new[] { "StoreId", "FilmId" }, "idx_fk_film_id_store_id");

                    b.ToTable("inventory", (string)null);
                });

            modelBuilder.Entity("RetroTapes.Models.Language", b =>
                {
                    b.Property<byte>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("language_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("LanguageId"));

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("last_update")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("char(20)")
                        .HasColumnName("name")
                        .IsFixedLength();

                    b.HasKey("LanguageId")
                        .HasName("PK__language__804CF6B387E7DDA7");

                    b.ToTable("language", (string)null);
                });

            modelBuilder.Entity("RetroTapes.Models.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("LogText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Log", (string)null);
                });

            modelBuilder.Entity("RetroTapes.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("payment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("amount");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("last_update")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime")
                        .HasColumnName("payment_date");

                    b.Property<int?>("RentalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("rental_id")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<byte>("StaffId")
                        .HasColumnType("tinyint")
                        .HasColumnName("staff_id");

                    b.HasKey("PaymentId")
                        .HasName("PK__payment__ED1FC9EA086038D5");

                    b.HasIndex("RentalId");

                    b.HasIndex(new[] { "CustomerId" }, "idx_fk_customer_id");

                    b.HasIndex(new[] { "StaffId" }, "idx_fk_staff_id");

                    b.ToTable("payment", (string)null);
                });

            modelBuilder.Entity("RetroTapes.Models.Rental", b =>
                {
                    b.Property<int>("RentalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("rental_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RentalId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<int>("InventoryId")
                        .HasColumnType("int")
                        .HasColumnName("inventory_id");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("last_update")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("RentalDate")
                        .HasColumnType("datetime")
                        .HasColumnName("rental_date");

                    b.Property<DateTime?>("ReturnDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("return_date")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<byte>("StaffId")
                        .HasColumnType("tinyint")
                        .HasColumnName("staff_id");

                    b.HasKey("RentalId")
                        .HasName("PK__rental__67DB611B4865A07A");

                    b.HasIndex(new[] { "CustomerId" }, "idx_fk_customer_id");

                    b.HasIndex(new[] { "InventoryId" }, "idx_fk_inventory_id");

                    b.HasIndex(new[] { "StaffId" }, "idx_fk_staff_id");

                    b.HasIndex(new[] { "RentalDate", "InventoryId", "CustomerId" }, "idx_uq")
                        .IsUnique();

                    b.ToTable("rental", (string)null);
                });

            modelBuilder.Entity("RetroTapes.Models.Reservation", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("reservation_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservationId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime")
                        .HasColumnName("expires_at");

                    b.Property<int>("InventoryId")
                        .HasColumnType("int")
                        .HasColumnName("inventory_id");

                    b.Property<DateTime>("LastUpdate")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime")
                        .HasColumnName("last_update");

                    b.Property<DateTime>("ReservedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("reserved_at");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint")
                        .HasColumnName("status");

                    b.HasKey("ReservationId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("InventoryId", "Status", "ExpiresAt")
                        .HasDatabaseName("IX_reservation_inventory_status_expires");

                    b.ToTable("reservation", (string)null);
                });

            modelBuilder.Entity("RetroTapes.Models.SalesByFilmCategory", b =>
                {
                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("category");

                    b.Property<decimal?>("TotalSales")
                        .HasColumnType("decimal(38, 2)")
                        .HasColumnName("total_sales");

                    b.ToTable((string)null);

                    b.ToView("sales_by_film_category", (string)null);
                });

            modelBuilder.Entity("RetroTapes.Models.SalesByStore", b =>
                {
                    b.Property<string>("Manager")
                        .IsRequired()
                        .HasMaxLength(91)
                        .IsUnicode(false)
                        .HasColumnType("varchar(91)")
                        .HasColumnName("manager");

                    b.Property<string>("Store")
                        .IsRequired()
                        .HasMaxLength(101)
                        .IsUnicode(false)
                        .HasColumnType("varchar(101)")
                        .HasColumnName("store");

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnName("store_id");

                    b.Property<decimal?>("TotalSales")
                        .HasColumnType("decimal(38, 2)")
                        .HasColumnName("total_sales");

                    b.ToTable((string)null);

                    b.ToView("sales_by_store", (string)null);
                });

            modelBuilder.Entity("RetroTapes.Models.Staff", b =>
                {
                    b.Property<byte>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("staff_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("StaffId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("active");

                    b.Property<int>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("address_id");

                    b.Property<string>("Email")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("last_name");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("last_update")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Password")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("password")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<byte[]>("Picture")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("image")
                        .HasColumnName("picture")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnName("store_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("username");

                    b.HasKey("StaffId")
                        .HasName("PK__staff__1963DD9C0EAD06A5");

                    b.HasIndex(new[] { "AddressId" }, "idx_fk_address_id");

                    b.HasIndex(new[] { "StoreId" }, "idx_fk_store_id");

                    b.ToTable("staff", (string)null);
                });

            modelBuilder.Entity("RetroTapes.Models.StaffList", b =>
                {
                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("country");

                    b.Property<byte>("Id")
                        .HasColumnType("tinyint")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(91)
                        .IsUnicode(false)
                        .HasColumnType("varchar(91)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone");

                    b.Property<int>("Sid")
                        .HasColumnType("int")
                        .HasColumnName("SID");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("zip_code");

                    b.ToTable((string)null);

                    b.ToView("staff_list", (string)null);
                });

            modelBuilder.Entity("RetroTapes.Models.Store", b =>
                {
                    b.Property<int>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("store_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StoreId"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("address_id");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("last_update")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte>("ManagerStaffId")
                        .HasColumnType("tinyint")
                        .HasColumnName("manager_staff_id");

                    b.HasKey("StoreId")
                        .HasName("PK__store__A2F2A30C026725D4");

                    b.HasIndex(new[] { "ManagerStaffId" }, "idx_fk_address_id")
                        .IsUnique();

                    b.HasIndex(new[] { "AddressId" }, "idx_fk_store_address");

                    b.ToTable("store", (string)null);
                });

            modelBuilder.Entity("RetroTapes.Models.View1", b =>
                {
                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("last_name");

                    b.Property<byte>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("staff_id");

                    b.ToTable((string)null);

                    b.ToView("View_1", (string)null);
                });

            modelBuilder.Entity("RetroTapes.Models.VwActiveCustomer", b =>
                {
                    b.Property<string>("Active")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("active")
                        .IsFixedLength();

                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("last_name");

                    b.ToTable((string)null);

                    b.ToView("vw_ActiveCustomers", (string)null);
                });

            modelBuilder.Entity("RetroTapes.Models.Address", b =>
                {
                    b.HasOne("RetroTapes.Models.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .IsRequired()
                        .HasConstraintName("fk_address_city");

                    b.Navigation("City");
                });

            modelBuilder.Entity("RetroTapes.Models.City", b =>
                {
                    b.HasOne("RetroTapes.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .IsRequired()
                        .HasConstraintName("fk_city_country");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("RetroTapes.Models.Customer", b =>
                {
                    b.HasOne("RetroTapes.Models.Address", "Address")
                        .WithMany("Customers")
                        .HasForeignKey("AddressId")
                        .IsRequired()
                        .HasConstraintName("fk_customer_address");

                    b.HasOne("RetroTapes.Models.Store", "Store")
                        .WithMany("Customers")
                        .HasForeignKey("StoreId")
                        .IsRequired()
                        .HasConstraintName("fk_customer_store");

                    b.Navigation("Address");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("RetroTapes.Models.Film", b =>
                {
                    b.HasOne("RetroTapes.Models.Language", "Language")
                        .WithMany("FilmLanguages")
                        .HasForeignKey("LanguageId")
                        .IsRequired()
                        .HasConstraintName("fk_film_language");

                    b.HasOne("RetroTapes.Models.Language", "OriginalLanguage")
                        .WithMany("FilmOriginalLanguages")
                        .HasForeignKey("OriginalLanguageId")
                        .HasConstraintName("fk_film_language_original");

                    b.Navigation("Language");

                    b.Navigation("OriginalLanguage");
                });

            modelBuilder.Entity("RetroTapes.Models.FilmActor", b =>
                {
                    b.HasOne("RetroTapes.Models.Actor", "Actor")
                        .WithMany("FilmActors")
                        .HasForeignKey("ActorId")
                        .IsRequired()
                        .HasConstraintName("fk_film_actor_actor");

                    b.HasOne("RetroTapes.Models.Film", "Film")
                        .WithMany("FilmActors")
                        .HasForeignKey("FilmId")
                        .IsRequired()
                        .HasConstraintName("fk_film_actor_film");

                    b.Navigation("Actor");

                    b.Navigation("Film");
                });

            modelBuilder.Entity("RetroTapes.Models.FilmCategory", b =>
                {
                    b.HasOne("RetroTapes.Models.Category", "Category")
                        .WithMany("FilmCategories")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("fk_film_category_category");

                    b.HasOne("RetroTapes.Models.Film", "Film")
                        .WithMany("FilmCategories")
                        .HasForeignKey("FilmId")
                        .IsRequired()
                        .HasConstraintName("fk_film_category_film");

                    b.Navigation("Category");

                    b.Navigation("Film");
                });

            modelBuilder.Entity("RetroTapes.Models.Inventory", b =>
                {
                    b.HasOne("RetroTapes.Models.Film", "Film")
                        .WithMany("Inventories")
                        .HasForeignKey("FilmId")
                        .IsRequired()
                        .HasConstraintName("fk_inventory_film");

                    b.HasOne("RetroTapes.Models.Store", "Store")
                        .WithMany("Inventories")
                        .HasForeignKey("StoreId")
                        .IsRequired()
                        .HasConstraintName("fk_inventory_store");

                    b.Navigation("Film");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("RetroTapes.Models.Payment", b =>
                {
                    b.HasOne("RetroTapes.Models.Customer", "Customer")
                        .WithMany("Payments")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("fk_payment_customer");

                    b.HasOne("RetroTapes.Models.Rental", "Rental")
                        .WithMany("Payments")
                        .HasForeignKey("RentalId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_payment_rental");

                    b.HasOne("RetroTapes.Models.Staff", "Staff")
                        .WithMany("Payments")
                        .HasForeignKey("StaffId")
                        .IsRequired()
                        .HasConstraintName("fk_payment_staff");

                    b.Navigation("Customer");

                    b.Navigation("Rental");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("RetroTapes.Models.Rental", b =>
                {
                    b.HasOne("RetroTapes.Models.Customer", "Customer")
                        .WithMany("Rentals")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("fk_rental_customer");

                    b.HasOne("RetroTapes.Models.Inventory", "Inventory")
                        .WithMany("Rentals")
                        .HasForeignKey("InventoryId")
                        .IsRequired()
                        .HasConstraintName("fk_rental_inventory");

                    b.HasOne("RetroTapes.Models.Staff", "Staff")
                        .WithMany("Rentals")
                        .HasForeignKey("StaffId")
                        .IsRequired()
                        .HasConstraintName("fk_rental_staff");

                    b.Navigation("Customer");

                    b.Navigation("Inventory");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("RetroTapes.Models.Reservation", b =>
                {
                    b.HasOne("RetroTapes.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RetroTapes.Models.Inventory", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("RetroTapes.Models.Staff", b =>
                {
                    b.HasOne("RetroTapes.Models.Address", "Address")
                        .WithMany("Staff")
                        .HasForeignKey("AddressId")
                        .IsRequired()
                        .HasConstraintName("fk_staff_address");

                    b.HasOne("RetroTapes.Models.Store", "Store")
                        .WithMany("Staff")
                        .HasForeignKey("StoreId")
                        .IsRequired()
                        .HasConstraintName("fk_staff_store");

                    b.Navigation("Address");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("RetroTapes.Models.Store", b =>
                {
                    b.HasOne("RetroTapes.Models.Address", "Address")
                        .WithMany("Stores")
                        .HasForeignKey("AddressId")
                        .IsRequired()
                        .HasConstraintName("fk_store_address");

                    b.HasOne("RetroTapes.Models.Staff", "ManagerStaff")
                        .WithOne("StoreNavigation")
                        .HasForeignKey("RetroTapes.Models.Store", "ManagerStaffId")
                        .IsRequired()
                        .HasConstraintName("fk_store_staff");

                    b.Navigation("Address");

                    b.Navigation("ManagerStaff");
                });

            modelBuilder.Entity("RetroTapes.Models.Actor", b =>
                {
                    b.Navigation("FilmActors");
                });

            modelBuilder.Entity("RetroTapes.Models.Address", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Staff");

                    b.Navigation("Stores");
                });

            modelBuilder.Entity("RetroTapes.Models.Category", b =>
                {
                    b.Navigation("FilmCategories");
                });

            modelBuilder.Entity("RetroTapes.Models.City", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("RetroTapes.Models.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("RetroTapes.Models.Customer", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("RetroTapes.Models.Film", b =>
                {
                    b.Navigation("FilmActors");

                    b.Navigation("FilmCategories");

                    b.Navigation("Inventories");
                });

            modelBuilder.Entity("RetroTapes.Models.Inventory", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("RetroTapes.Models.Language", b =>
                {
                    b.Navigation("FilmLanguages");

                    b.Navigation("FilmOriginalLanguages");
                });

            modelBuilder.Entity("RetroTapes.Models.Rental", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("RetroTapes.Models.Staff", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Rentals");

                    b.Navigation("StoreNavigation");
                });

            modelBuilder.Entity("RetroTapes.Models.Store", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Inventories");

                    b.Navigation("Staff");
                });
#pragma warning restore 612, 618
        }
    }
}
